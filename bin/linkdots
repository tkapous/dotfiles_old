#!/bin/bash

# links files from SRC to their provided LINK

DOTFILESPATH=$HOME
GITURL=https://github.com/Biggybi/dotfiles
SRC=$DOTFILESPATH/dotfiles
DST=$HOME
BACKUP=$DOTFILESPATH/dotfiles/dots_back

TEST=0
if [ $TEST == 1 ]; then
  BACKUP="/tmp/linkdots_test/dots_back/"
  [ $BACKUP == "/tmp/linkdots_test/dots_back" ] && mkdir -p "$BACKUP"
  DST="/tmp/linkdots_test/dot"
  [ $DST == "/tmp/linkdots_test/dot" ] && mkdir -p "$DST"
  echo "backup = $BACKUP"
  echo "dst = $DST"
  echo "src = $SRC"
fi

cd $SRC

# [dotfile]=link
declare -A dot_links=(
  ["vim"]=.vim
  ["nvim"]=.config/nvim
  ["shells/zsh/zshrc"]=.zshrc
  ["shells/zsh/zshenv"]=.zshenv
  ["shells/zsh/zsh_aliases"]=.zsh_aliases
  ["shells/xterm/Xresources"]=.Xresources
  ["shells/bash/bashrc"]=.bashrc
  ["shells/bash/bash_aliases"]=.bash_aliases
  ["shells/alacritty/alacritty.yml"]=.config/alacritty/alacritty.yml
  ["shells/wezterm"]=.config/wezterm
  ["shells/starship/starship.toml"]=.config/starship.toml
  ["inputrc"]=.inputrc
  ["tmux/tmux.conf"]=.tmux.conf
  ["bin"]=bin
  ["git/config"]=.config/git/config
  ["git/git_template"]=.git_template
  ["fonts"]=.fonts
  ["ssh/ssh_config"]=.ssh/config
  ["autostart/tmux_server.desktop"]=.config/autostart/tmux_server.desktop
  ["autostart/tmux_theme_sync.desktop"]=.config/autostart/tmux_theme_sync.desktop
)

if [ -d "$SRC" ]; then
  echo "Not cloning: $SRC exists"
else
  git clone $GITURL $SRC
fi

if [ "$1" == "--git" ] || [ "$1" == "-g" ] || [ "$1" == "--plugins" ]; then
  echo "Cloning plugins"
  cd "${dot_links[vim]}"
  git submodule init
  git submodule update
else
  echo "Plugins already installed"
fi

# Iterate over each key-value pair in the associative array
for dot in "${!dot_links[@]}"; do
  link="$DST/${dot_links[$dot]}"
  dot="$SRC/$dot"
  echo "Linking $dot to $link"

  cmp -s $dot $link
  if [ $? -eq 1 ] && [ -n "$link" ] && [ -e $link ]; then
    echo "backing up..."
    lback=$link
    if [ -e "$BACKUP/$lback" ] && [ -n "$lback" ]; then
      j=0
      while [ -e "$BACKUP/$lback$j" ]; do
        let j=j+1
        echo "$BACKUP/$lback$j exists, new backup file"
      done
      lback="$lback$j"
    fi
    if [ -d $link ]; then
      mkdir -p "$BACKUP/$lback"
      mv $link/* "$BACKUP/$lback/"
    else
      mv $link "$BACKUP/$lback"
    fi
    echo "Saved '$link' to '$BACKUP/$lback'"
  fi

  if [ ! -e $link ]; then
    linkparent=$(dirname $link)
    ! [ -d "$linkparent" ] && mkdir -p "$linkparent"
    ln -fs $dot $link
    echo "Link created: $link -> $dot"
  fi
done
